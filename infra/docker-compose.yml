services:
  # Central server for development testing
  server:
    build:
      context: ../server
      dockerfile: ../infra/server.dockerfile
    container_name: portscan-server
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PORT=5000
      - FLASK_APP=run.py
    volumes:
      - ../server:/app
      - ./server.env:/app/.env:ro
      - server_sessions:/app/sessions
      - server_uploads:/app/uploads
      - server_scan_results:/app/scan_results
      - server_instance:/app/instance
    depends_on:
      redis:
        condition: service_started
    networks:
      testnet:
        ipv4_address: 172.20.0.2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis service for server
  redis:
    image: redis:alpine
    container_name: server-redis
    command: redis-server
    networks:
      testnet:
        ipv4_address: 172.20.0.5
    expose:
      - "6379"

  # Raspberry Pi 4 client simulator
  rpi-client:
    build:
      context: ../client
      dockerfile: ../infra/client.dockerfile
    container_name: rpi-client
    depends_on:
      server:
        condition: service_healthy
    volumes:
      - ../client:/app
      - ./test-config.yml:/app/config.yml:ro
    networks:
      testnet:
        ipv4_address: 172.20.0.100
    privileged: true
    environment:
      - PYTHONUNBUFFERED=1
      - SERVER_URL=http://localhost:5000

  # Second Raspberry Pi client simulator
  rpi-client-2:
    build:
      context: ../client
      dockerfile: ../infra/client.dockerfile
    container_name: rpi-client-2
    depends_on:
      server:
        condition: service_healthy
    volumes:
      - ../client:/app
      - ./test-config-client2.yml:/app/config.yml:ro
    networks:
      testnet:
        ipv4_address: 172.20.0.101
    privileged: true
    environment:
      - PYTHONUNBUFFERED=1
      - SERVER_URL=http://localhost:5000

  # Test target: SSH server
  target-ssh:
    image: linuxserver/openssh-server:latest
    container_name: target-ssh
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - PASSWORD_ACCESS=true
      - USER_NAME=testuser
      - USER_PASSWORD=testpass123
    networks:
      testnet:
        ipv4_address: 172.20.0.8
    expose:
      - "2222"

  # Test target: Web server
  target-web:
    image: nginx:alpine
    container_name: target-web
    ports:
      - "8080:80"
    volumes:
      - ./test-web:/usr/share/nginx/html:ro
    networks:
      testnet:
        ipv4_address: 172.20.0.9
    expose:
      - "80"
      - "443"

  # Test target: Database server
  target-db:
    image: mysql:8.0
    container_name: target-db
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass123
      - MYSQL_DATABASE=testdb
      - MYSQL_USER=testuser
      - MYSQL_PASSWORD=testpass123
    networks:
      testnet:
        ipv4_address: 172.20.0.10
    expose:
      - "3306"

  # Test target: FTP server
  target-ftp:
    image: stilliard/pure-ftpd:hardened
    platform: linux/amd64
    container_name: target-ftp
    environment:
      - PUBLICHOST=172.20.0.13
      - FTP_USER_NAME=testuser
      - FTP_USER_PASS=testpass123
      - FTP_USER_HOME=/home/testuser
    networks:
      testnet:
        ipv4_address: 172.20.0.18
    expose:
      - "21"
      - "30000-30009"

  # Test target: Redis cache
  target-redis:
    image: redis:alpine
    container_name: target-redis
    command: redis-server --requirepass testpass123
    networks:
      testnet:
        ipv4_address: 172.20.0.19
    expose:
      - "6379"

  # Test target: Custom multi-port service
  target-multiport:
    image: alpine:latest
    container_name: target-multiport
    command: >
      sh -c "apk add --no-cache netcat-openbsd &&
             nc -l -p 8080 & nc -l -p 8443 & nc -l -p 9000 & nc -l -p 22 & wait"
    networks:
      testnet:
        ipv4_address: 172.20.0.20
    expose:
      - "22"
      - "8080"
      - "8443"
      - "9000"

networks:
  testnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  server_sessions:
  server_uploads:
  server_scan_results:
  server_instance: